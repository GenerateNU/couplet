openapi: 3.1.0

info:
  version: 0.0.0
  title: Couplet API
  description: Connect with other users through shared interests and local events

paths:
  /health-check:
    get:
      summary: Check if the server is running and servicing requests
      operationId: healthCheck
      responses:
        '200':
          description: The server is healthy
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      # TODO: Paginate this
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: Successfully retrieved all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      summary: Get a user by their user ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to retrieve
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Successfully retrieved specified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  responses:
    UnexpectedError:
      description: An unexpected error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: uint16
          minimum: 100
          maximum: 599
          example: 500
        message:
          type: string
          example: Internal server error
    Event:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - name
      properties:
        id:
          $ref: '#/components/schemas/EventId'
        createdAt:
          type: string
          format: date-time
          example: 2022-02-22T11:22:33Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-02-22T11:22:33Z
        name:
          type: string
          minLength: 1
          example: The Big Event
        # TODO:
        # location
        # org_id fk
        # link TBD
        # schedule TBD
        # - optional datetime range (within a week)
        # - optional recurring until (some day)
        # price range low~high
        # image(s)
        # bio
        # event types/tags (enum array)
    EventId:
      type: string
      format: uuid
      example: 5e91507e-5630-4efd-9fd4-799178870b10
      x-oapi-codegen-extra-tags:
        gorm: primaryKey, default:gen_random_uuid()
    User:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - firstName
        - lastName
        - age
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        createdAt:
          type: string
          format: date-time
          example: 2022-02-22T11:22:33Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-02-22T11:22:33Z
        firstName:
          type: string
          minLength: 1
          example: Bob
        lastName:
          type: string
          minLength: 1
          example: Smith
        age:
          type: integer
          format: uint8
          minimum: 18
          example: 22
        # TODO
        # gender
        # hashed password
        # email
        # phone number/social
        # Location
        # preferences
        # - what they like
        # Profile
        # - pics
        # - about me
        # matches TBD
    UserId:
      type: string
      format: uuid
      example: 5e91507e-5630-4efd-9fd4-799178870b10
      x-oapi-codegen-extra-tags:
        gorm: primaryKey, default:gen_random_uuid()
    Organization:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - name
      properties:
        id:
          $ref: '#/components/schemas/OrganizationId'
        createdAt:
          type: string
          format: date-time
          example: 2022-02-22T11:22:33Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-02-22T11:22:33Z
        name:
          type: string
          minLength: 1
          example: The Events Company
        # TODO
        # bio
        # profile pic/image
        # org types/tags (enum array)
    OrganizationId:
      type: string
      format: uuid
      example: 5e91507e-5630-4efd-9fd4-799178870b10
      x-oapi-codegen-extra-tags:
        gorm: primaryKey, default:gen_random_uuid()